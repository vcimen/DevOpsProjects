AWSTemplateFormatVersion: 2010-09-09

Description: |
  CloudFormation Template for directory Application.
  Directory is deployed ALB, Auto-scaling Group with RDS.

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be the VPC Id of an existing Virtual Private Cloud. Outbound traffic
      for the default security group associated with this VPC should be enabled.
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  AllowedIP:
    Description: The IP address range that can have access for ports 22 and 80
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP for App Load Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedIP
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP, SSH for Flask Web Server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIP
  WebServerLT:
      Type: AWS::EC2::LaunchTemplate
      Properties: 
        LaunchTemplateData:
          ImageId: ami-0947d2ba12ee1ff75
          InstanceType: t2.micro
          KeyName: !Ref KeyName
          SecurityGroupIds: 
            - !GetAtt WebServerSecurityGroup.GroupId
          TagSpecifications: 
            - ResourceType: instance
              Tags: 
                - Key: Name
                  Value: !Sub Web Server of ${AWS::StackName} Stack 
          UserData:
            Fn::Base64: 
              !Sub
                - |
                  #! /bin/bash
                  yum update -y
                  yum install python3 -y
                  yum install mysql -y
                  pip3 install flask
                  pip3 install flask_mysql
                  echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                  FOLDER="https://raw.githubusercontent.com/vcimen/DevOpsProjects/master/directory_web_application/"
                  curl -s --create-dirs -o "/home/ec2-user/templates/index.html" -L "$FOLDER"templates/index.html
                  curl -s --create-dirs -o "/home/ec2-user/templates/add-update.html" -L "$FOLDER"templates/add-update.html
                  curl -s --create-dirs -o "/home/ec2-user/templates/delete.html" -L "$FOLDER"templates/delete.html
                  curl -s --create-dirs -o "/home/ec2-user/app.py" -L "$FOLDER"directory-app.py
                  python3 /home/ec2-user/app.py
                - MyDBURI: !GetAtt MyDatabaseServer.Endpoint.Address
  WebServerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !GetAtt WebServerSecurityGroup.VpcId
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: !Ref Subnets
      Type: application
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - TargetGroupArn: !Ref WebServerTG
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  WebServerASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties: 
        AvailabilityZones: 
          !GetAZs ""
        DesiredCapacity: 2
        HealthCheckGracePeriod: 300
        HealthCheckType: ELB
        LaunchTemplate: 
          LaunchTemplateId: !Ref WebServerLT
          Version: !GetAtt WebServerLT.LatestVersionNumber 
        MaxSize: 3
        MinSize: 1
        TargetGroupARNs: 
          - !Ref WebServerTG
  MyDBSecurityGroup:
    Type: "AWS::RDS::DBSecurityGroup"
    Properties:
      GroupDescription: Frontend Access
      DBSecurityGroupIngress:
        - CIDRIP: 0.0.0.0/0
        - EC2SecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId
  MyDatabaseServer:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.micro #required
      DBInstanceIdentifier: directory-app-db
      DBName: directory
      Engine: MySQL
      EngineVersion: 8.0.19
      MasterUserPassword: Comp5331
      MasterUsername: admin
      MonitoringInterval: 0
      MultiAZ: false
      Port: 3306
      PubliclyAccessible: true
      DBSecurityGroups:
        - Ref: MyDBSecurityGroup

Outputs:
  WebsiteURL:
    Value: !Sub 
      - http://${ALBAddress}
      - ALBAddress: !GetAtt ApplicationLoadBalancer.DNSName
    Description: directory Application Load Balancer URL